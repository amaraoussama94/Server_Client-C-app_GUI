##
# @file build-release.yml
# @brief Unified GitHub Actions workflow for cross-platform C builds, GUI packaging,
#        version bump via pull request, and automated release.
#
# @details
# This workflow performs the following:
#   - Builds C server/client on Windows and Linux
#   - Builds Python GUI using PyInstaller (with PyQt5)
#   - Places all binaries in build/bin/
#   - Uploads artifacts with distinct names to avoid conflicts
#   - Downloads artifacts into dist/
#   - Filters and packages binaries into release/windows/ and release/linux/
#   - Bumps version tag and creates GitHub release
#
# @note
# Artifact filtering is now filename-based from dist/, not subfolders
# GUI and C binaries are unified under build/bin/ for consistency
#
# @author Oussama Amara
# @version 2.8
# @date 2025-10-26
##

name: Cross-Platform Build, GUI Packaging & Release

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  ##
  # @brief Build C binaries on Windows using MSYS2
  ##
  build-windows:
    name: Build C on Windows
    runs-on: windows-latest
    defaults:
      run:
        shell: bash

    steps:
    - name: üßæ Checkout code
      uses: actions/checkout@v3

    - name: üõ† Set up MSYS2
      uses: msys2/setup-msys2@v2
      with:
        update: true
        install: >-
          base-devel
          mingw-w64-x86_64-gcc
          make

    - name: üß± Build C binaries
      run: |
        make clean
        make all

    - name: üì§ Upload Windows C artifacts
      uses: actions/upload-artifact@v4
      with:
        name: windows-c
        path: build/bin/

  ##
  # @brief Build C binaries on Linux
  ##
  build-linux:
    name: Build C on Linux
    runs-on: ubuntu-latest

    steps:
    - name: üßæ Checkout code
      uses: actions/checkout@v3

    - name: üõ† Install build tools
      run: sudo apt-get update && sudo apt-get install -y build-essential

    - name: üß± Build C binaries
      run: |
        make clean
        make all

    - name: üì§ Upload Linux C artifacts
      uses: actions/upload-artifact@v4
      with:
        name: linux-c
        path: build/bin/

  ##
  # @brief Build Python GUI executable on Windows using PyInstaller
  ##
  build-gui-windows:
    name: Build GUI Executable (Windows)
    runs-on: windows-latest

    steps:
    - name: üßæ Checkout code
      uses: actions/checkout@v3

    - name: üêç Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: üì¶ Install PyInstaller and PyQt5
      run: pip install pyinstaller PyQt5

    - name: üß± Build GUI binary
      run: |
        cd client_gui
        pyinstaller --onefile --windowed --name ServerClientGUI --distpath ../build/bin main.py

    - name: üì§ Upload Windows GUI artifact
      uses: actions/upload-artifact@v4
      with:
        name: windows-gui
        path: build/bin/

  ##
  # @brief Build Python GUI executable on Linux using PyInstaller
  ##
  build-gui-linux:
    name: Build GUI Executable (Linux)
    runs-on: ubuntu-latest

    steps:
    - name: üßæ Checkout code
      uses: actions/checkout@v3

    - name: üêç Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: üì¶ Install PyInstaller and PyQt5
      run: pip install pyinstaller PyQt5

    - name: üß± Build GUI binary
      run: |
        cd client_gui
        pyinstaller --onefile --name ServerClientGUI --distpath ../build/bin main.py

    - name: üì§ Upload Linux GUI artifact
      uses: actions/upload-artifact@v4
      with:
        name: linux-gui
        path: build/bin/

  ##
  # @brief Create version bump PR and GitHub release
  ##
    ##
  # @brief Create version bump PR and GitHub release
  # @details
  # This job runs after all builds succeed. It:
  #   - Detects latest version tag
  #   - Increments version
  #   - Creates a pull request if needed
  #   - Tags the release
  #   - Downloads all artifacts into dist/
  #   - Filters binaries by filename into release/windows/ and release/linux/
  #   - Publishes platform-specific binaries to GitHub Releases
  # @note
  # Artifact folders are no longer used; filtering is done directly from dist/ using file patterns
  ##
  tag-and-release:
    name: Version Bump PR + Release
    needs: [build-windows, build-linux, build-gui-windows, build-gui-linux]
    runs-on: ubuntu-latest

    steps:
    - name: üßæ Checkout code
      uses: actions/checkout@v3

    - name: üîê Configure Git identity
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"

    - name: üî¢ Detect and increment version
      id: versioning
      run: |
        git fetch --tags
        LATEST_TAG=$(git tag | grep '^SRV_CLE_GEN_GUI_' | sort -V | tail -n1)
        if [ -z "$LATEST_TAG" ]; then
          NEW_VERSION="1.0"
        else
          BASE_VERSION=${LATEST_TAG#SRV_CLE_GEN_GUI_}
          MAJOR=$(echo $BASE_VERSION | cut -d. -f1)
          MINOR=$(echo $BASE_VERSION | cut -d. -f2)
          if [ "$MINOR" -lt 9 ]; then
            NEW_VERSION="$MAJOR.$((MINOR + 1))"
          else
            NEW_VERSION="$((MAJOR + 1)).0"
          fi
        fi
        CURRENT_VERSION=$(cat VERSION || echo "")
        if [ "$CURRENT_VERSION" != "$NEW_VERSION" ]; then
          echo "$NEW_VERSION" > VERSION
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
        else
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        fi

    - name: üõë Check for actual diff before PR
      run: |
        git add VERSION
        if git diff --cached --quiet; then
          echo "‚úÖ No staged changes in VERSION. Skipping PR."
          exit 0
        else
          echo "üìå VERSION file has changes. Proceeding with PR."
        fi

    - name: üîÅ Create Pull Request
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GUI_TOKEN }}
        branch: version-bump-${{ steps.versioning.outputs.version }}
        title: "chore: bump version to ${{ steps.versioning.outputs.version }}"
        body: | 
            # üìù Task Title
            Automated version bump and release preparation

            # üìå Summary
            This PR updates the `VERSION` file to `${{ steps.versioning.outputs.version }}`.
            Triggered by successful builds on Windows and Linux.

            # üìÇ Related File Changes
            - VERSION

            # üß™ Testing
            - [x] CI builds passed
            - [x] Artifacts uploaded
            - [ ] Manual testing not applicable

            # üß† Notes for Reviewers
            Auto-generated by GitHub Actions. No functional changes.

            # ‚úÖ Checklist
            - [x] Code compiles
            - [x] No debug prints
            - [x] VERSION updated

        labels: version-bump, automated
        assignees: oussamaamara94

    - name: üßæ Checkout after merge
      if: github.ref == 'refs/heads/main'
      uses: actions/checkout@v3

    - name: üî¢ Read merged version
      if: github.ref == 'refs/heads/main'
      id: merged-version
      run: |
        VERSION=$(cat VERSION)
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: üè∑ Create and push tag
      if: github.ref == 'refs/heads/main'
      run: |
        TAG="SRV_CLE_GEN_GUI_${{ steps.merged-version.outputs.version }}"
        if git rev-parse "$TAG" >/dev/null 2>&1; then
          echo "‚ö†Ô∏è Tag $TAG already exists. Skipping."
        else
          git tag -a "$TAG" -m "Auto-generated tag: $TAG"
          git push origin "$TAG"
        fi

    - name: üì• Download artifacts
      if: github.ref == 'refs/heads/main'
      uses: actions/download-artifact@v4
      with:
        path: dist/
        merge-multiple: true

    - name: üß© Normalize artifact folders
      if: github.ref == 'refs/heads/main'
      run: |
        mkdir -p release/windows release/linux
        find dist -type f -name "*ServerClientGUI.exe" -exec cp {} release/windows/ \;
        find dist -type f -name "*client.exe" -exec cp {} release/windows/ \;
        find dist -type f -name "*server.exe" -exec cp {} release/windows/ \;
        find dist -type f -name "ServerClientGUI" -exec cp {} release/linux/ \;
        find dist -type f -name "client" -exec cp {} release/linux/ \;
        find dist -type f -name "server" -exec cp {} release/linux/ \;

    - name: üöÄ Create GitHub Release
      if: github.ref == 'refs/heads/main'
      uses: softprops/action-gh-release@v1
      with:
        name: Release ${{ steps.merged-version.outputs.version }}
        tag_name: SRV_CLE_GEN_GUI_${{ steps.merged-version.outputs.version }}
        files: |
          release/windows/*
          release/linux/*
