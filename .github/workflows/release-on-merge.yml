##
# @file build-release.yml
# @brief Unified GitHub Actions workflow for cross-platform C builds, GUI packaging,
#        version bump via pull request, and automated release.
#
# @details
# This workflow performs the following:
#   - Builds C server/client on Windows and Linux
#   - Builds Python GUI using PyInstaller (with PyQt5)
#   - Packages all platform-specific binaries into unified folders
#   - Uploads artifacts with distinct names to avoid conflicts
#   - Bumps version tag and creates GitHub release
#
# @note
# GUI builds are now split into separate jobs for Windows and Linux to avoid shell compatibility issues.
# Artifact names are unique: windows-c, windows-gui, linux-c, linux-gui
#
# @author Oussama Amara
# @version 2.6
# @date 2025-10-26
##

name: Cross-Platform Build, GUI Packaging & Release

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  ##
  # @brief Build C binaries on Windows using MSYS2
  ##
  build-windows:
    name: Build C on Windows
    runs-on: windows-latest
    defaults:
      run:
        shell: bash

    steps:
    - name: 🧾 Checkout code
      uses: actions/checkout@v3

    - name: 🛠 Set up MSYS2
      uses: msys2/setup-msys2@v2
      with:
        update: true
        install: >-
          base-devel
          mingw-w64-x86_64-gcc
          make

    - name: 🧱 Build C binaries
      run: |
        make clean
        make all

    - name: 📦 Package Windows C binaries
      run: |
        mkdir -p dist/windows
        cp build/bin/*.exe dist/windows/

    - name: 📤 Upload Windows C artifacts
      uses: actions/upload-artifact@v4
      with:
        name: windows-c
        path: dist/windows/

  ##
  # @brief Build C binaries on Linux
  ##
  build-linux:
    name: Build C on Linux
    runs-on: ubuntu-latest

    steps:
    - name: 🧾 Checkout code
      uses: actions/checkout@v3

    - name: 🛠 Install build tools
      run: sudo apt-get update && sudo apt-get install -y build-essential

    - name: 🧱 Build C binaries
      run: |
        make clean
        make all

    - name: 📦 Package Linux C binaries
      run: |
        mkdir -p dist/linux
        cp build/bin/* dist/linux/

    - name: 📤 Upload Linux C artifacts
      uses: actions/upload-artifact@v4
      with:
        name: linux-c
        path: dist/linux/

  ##
  # @brief Build Python GUI executable on Windows using PyInstaller
  ##
  build-gui-windows:
    name: Build GUI Executable (Windows)
    runs-on: windows-latest

    steps:
    - name: 🧾 Checkout code
      uses: actions/checkout@v3

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: 📦 Install PyInstaller and PyQt5
      run: pip install pyinstaller PyQt5

    - name: 🧱 Build GUI binary
      run: |
        cd client_gui
        pyinstaller --onefile --windowed main.py --name ServerClientGUI

    - name: 📦 Package Windows GUI binary
      run: |
        mkdir -p dist/windows
        cp client_gui/dist/ServerClientGUI.exe dist/windows/

    - name: 📤 Upload Windows GUI artifact
      uses: actions/upload-artifact@v4
      with:
        name: windows-gui
        path: dist/windows/

  ##
  # @brief Build Python GUI executable on Linux using PyInstaller
  ##
  build-gui-linux:
    name: Build GUI Executable (Linux)
    runs-on: ubuntu-latest

    steps:
    - name: 🧾 Checkout code
      uses: actions/checkout@v3

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: 📦 Install PyInstaller and PyQt5
      run: pip install pyinstaller PyQt5

    - name: 🧱 Build GUI binary
      run: |
        cd client_gui
        pyinstaller --onefile --windowed main.py --name ServerClientGUI

    - name: 📦 Package Linux GUI binary
      run: |
        mkdir -p dist/linux
        cp client_gui/dist/ServerClientGUI dist/linux/

    - name: 📤 Upload Linux GUI artifact
      uses: actions/upload-artifact@v4
      with:
        name: linux-gui
        path: dist/linux/
    ##
  # @brief Create version bump PR and GitHub release
  # @details
  # This job runs after all builds succeed. It:
  #   - Detects latest version tag
  #   - Increments version
  #   - Creates a pull request if needed
  #   - Tags the release
  #   - Downloads and merges artifacts from all build jobs
  #   - Publishes unified platform-specific binaries to GitHub Releases
  # @note
  # Artifact folders are normalized into dist/windows/ and dist/linux/
  ##
  tag-and-release:
    name: Version Bump PR + Release
    needs: [build-windows, build-linux, build-gui-windows, build-gui-linux]
    runs-on: ubuntu-latest

    steps:
    - name: 🧾 Checkout code
      uses: actions/checkout@v3

    - name: 🔐 Configure Git identity
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"

    - name: 🔢 Detect and increment version
      id: versioning
      run: |
        git fetch --tags
        LATEST_TAG=$(git tag | grep '^SRV_CLE_GEN_GUI_' | sort -V | tail -n1)
        if [ -z "$LATEST_TAG" ]; then
          NEW_VERSION="1.0"
        else
          BASE_VERSION=${LATEST_TAG#SRV_CLE_GEN_GUI_}
          MAJOR=$(echo $BASE_VERSION | cut -d. -f1)
          MINOR=$(echo $BASE_VERSION | cut -d. -f2)
          if [ "$MINOR" -lt 9 ]; then
            NEW_VERSION="$MAJOR.$((MINOR + 1))"
          else
            NEW_VERSION="$((MAJOR + 1)).0"
          fi
        fi
        CURRENT_VERSION=$(cat VERSION || echo "")
        if [ "$CURRENT_VERSION" != "$NEW_VERSION" ]; then
          echo "$NEW_VERSION" > VERSION
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
        else
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        fi

    - name: 🛑 Check for actual diff before PR
      run: |
        git add VERSION
        if git diff --cached --quiet; then
          echo "✅ No staged changes in VERSION. Skipping PR."
          exit 0
        else
          echo "📌 VERSION file has changes. Proceeding with PR."
        fi

    - name: 🔁 Create Pull Request
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GUI_TOKEN }}
        branch: version-bump-${{ steps.versioning.outputs.version }}
        title: "chore: bump version to ${{ steps.versioning.outputs.version }}"
        body: |
          Automated version bump to `${{ steps.versioning.outputs.version }}`.
          Triggered by successful builds on Windows, Linux, and GUI packaging.
        labels: version-bump, automated
        assignees: OussamaAmara

    - name: 🧾 Checkout after merge
      if: github.ref == 'refs/heads/main'
      uses: actions/checkout@v3

    - name: 🔢 Read merged version
      if: github.ref == 'refs/heads/main'
      id: merged-version
      run: |
        VERSION=$(cat VERSION)
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: 🏷 Create and push tag
      if: github.ref == 'refs/heads/main'
      run: |
        TAG="SRV_CLE_GEN_GUI_${{ steps.merged-version.outputs.version }}"
        if git rev-parse "$TAG" >/dev/null 2>&1; then
          echo "⚠️ Tag $TAG already exists. Skipping."
        else
          git tag -a "$TAG" -m "Auto-generated tag: $TAG"
          git push origin "$TAG"
        fi

    - name: 📥 Download artifacts
      if: github.ref == 'refs/heads/main'
      uses: actions/download-artifact@v4
      with:
        path: dist/
        merge-multiple: true

    - name: 🧩 Normalize artifact folders
      if: github.ref == 'refs/heads/main'
      run: |
        mkdir -p dist/windows dist/linux
        cp -r dist/windows-c/* dist/windows/ || true
        cp -r dist/windows-gui/* dist/windows/ || true
        cp -r dist/linux-c/* dist/linux/ || true
        cp -r dist/linux-gui/* dist/linux/ || true

    - name: 🚀 Create GitHub Release
      if: github.ref == 'refs/heads/main'
      uses: softprops/action-gh-release@v1
      with:
        name: Release ${{ steps.merged-version.outputs.version }}
        tag_name: SRV_CLE_GEN_GUI_${{ steps.merged-version.outputs.version }}
        files: |
          dist/windows/*
          dist/linux/*
